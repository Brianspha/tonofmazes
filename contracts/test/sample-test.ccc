import { expect } from "chai";
import { Contract, Signer, WalletTypes } from "locklift";
import { FactorySource } from "../build/factorySource";
import { Address } from "locklift/.";
import { isValidEverAddress, isNumeric, zeroAddress, Migration } from "../scripts/utils";
const BigNumber = require("bignumber.js");
const EMPTY_TVM_CELL = "te6ccgEBAQEAAgAAAA==";
let TonOfMaze: Contract<FactorySource["TonOfMaze"]>;
let Token: Contract<FactorySource["TokenWallet"]>;
let TokenWallet: Contract<FactorySource["TokenRoot"]>;
let signer: Signer;
let wallets: any[];

describe("Test Sample contract", async function () {
  before(async () => {
    signer = (await locklift.keystore.getSigner("0"))!;
  });
  describe("Contracts", async function () {
    it("Load contract factory", async function () {
      const TonOfMaze = await locklift.factory.getContractArtifacts("TonOfMaze");
      const TokenWallet = await locklift.factory.getContractArtifacts("TokenWallet");
      expect(TokenWallet.code).not.to.equal(undefined, "Code should be available");
      expect(TokenWallet.abi).not.to.equal(undefined, "ABI should be available");
      expect(TokenWallet.tvc).not.to.equal(undefined, "tvc should be available");
      expect(TonOfMaze.code).not.to.equal(undefined, "Code should be available");
      expect(TonOfMaze.abi).not.to.equal(undefined, "ABI should be available");
      expect(TonOfMaze.tvc).not.to.equal(undefined, "tvc should be available");
    });
    it("Deploy contract", async function () {
      const keyPairs = await locklift.keystore.getSigner("0");
      const initialSupplyTo = "0:2b20c0d0451c40945fb13b38ae5121128e38a7f15fcbc11f9cc5d8a968b8775d";
      const rootOwner = zeroAddress;
      const name = "Ton Of Maze Token";
      const symbol = "TOMT";
      const decimals = 18;
      const disableMint = false;
      const disableBurnByRoot = false;
      const pauseBurn = false;
      let initialSupply = 100000000000;
      const TokenWallet = locklift.factory.getContractArtifacts("TokenWallet");

      const deploys: Promise<{ account: Object; tx: Object }>[] = [];
      for (let i = 0; i < 5; i++) {
        const signer = (await locklift.keystore.getSigner(i.toString()))!;
        deploys.push(
          locklift.factory.accounts.addNewAccount({
            type: WalletTypes.HighLoadWalletV2, // or WalletTypes.HighLoadWallet or WalletTypes.WalletV3,
            //Value which will send to the new account from a giver
            value: locklift.utils.toNano(300),
            //owner publicKey
            publicKey: signer.publicKey,
          }),
        );
      }
      wallets = (await Promise.all(deploys)).map(o => o.account);
      const wallet = wallets[0];
      const { contract: tokenRoot } = await locklift.factory.deployContract({
        contract: "TokenRoot",
        publicKey: keyPairs!.publicKey,
        initParams: {
          deployer_: new Address(zeroAddress),
          randomNonce_: (Math.random() * 6400) | 0,
          rootOwner_: rootOwner,
          name_: name,
          symbol_: symbol,
          decimals_: decimals,
          walletCode_: TokenWallet.code,
        },
        constructorParams: {
          initialSupplyTo: initialSupplyTo,
          initialSupply: new BigNumber(initialSupply).shiftedBy(decimals).toFixed(),
          deployWalletValue: locklift.utils.toNano(1),
          mintDisabled: disableMint,
          burnByRootDisabled: disableBurnByRoot,
          burnPaused: pauseBurn,
          remainingGasTo: new Address(zeroAddress),
        },
        value: locklift.utils.toNano(5),
      });
      Token = tokenRoot;
      expect(await locklift.provider.getBalance(Token.address).then(balance => Number(balance))).to.be.above(0);
    });
    it("Deploy contract", async function () {
      const keyPairs = await locklift.keystore.getSigner("0");
      const { contract: contract, tx } = await locklift.factory.deployContract({
        contract: "TonOfMaze",
        publicKey: keyPairs!.publicKey,
        initParams: {
          _randomNonce: locklift.utils.getRandomNonce(),
        },
        constructorParams: {
          _deployWalletBalance: 1,
          _tokenRoot: Token.address,
        },
        value: locklift.utils.toNano(3),
      });
      TonOfMaze = contract;
      expect(await locklift.provider.getBalance(TonOfMaze.address).then(balance => Number(balance))).to.be.above(0);
    });

    it("Should transfer some tokens to Ton Of Maze", async function () {
      const keyPairs = await locklift.keystore.getSigner("0");
      const accountFactory = locklift.factory.getAccountsFactory("Account");
      const account = accountFactory.getAccount(new Address(keyPairs!.publicKey), keyPairs!.publicKey);
     console.log("account: ",account)
      await account.runTarget(
        {
          contract: Token,
          value: locklift.utils.toNano(200),
        },
        Token =>
        Token.methods.transfer({
            amount: 100,
            recipient: wallets[0].address,
            deployWalletValue: locklift.utils.toNano(5),
            remainingGasTo: wallets[0].address,
            notify: true,
            payload: EMPTY_TVM_CELL,
          }),
      );
    });
  });
});
